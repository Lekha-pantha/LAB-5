#include <stdio.h>
#include <stdlib.h>
#include <time.h>

long long modular_exponentiation(long long base, long long exp, long long mod) {
    long long result = 1;
    base = base % mod; // Update base if it's more than or equal to mod
    while (exp > 0) {
        if (exp % 2 == 1) { // If exp is odd, multiply base with result
            result = (result * base) % mod;
        }
        exp = exp >> 1; // Divide exp by 2
        base = (base * base) % mod; // Square the base
    }
    return result;
}


int is_prime(int p, int iterations) {
    // Edge cases
    if (p <= 1) return 0;
    if (p <= 3) return 1;
    if (p % 2 == 0 || p % 3 == 0) return 0;

  
    for (int i = 0; i < iterations; i++) {
        int a = rand() % (p - 4) + 2; // Random a in range [2, p-2]
        if (modular_exponentiation(a, p - 1, p) != 1) {
            return 0; // If any `a` fails, p is not prime
        }
    }
    return 1; // If all `a` pass, p is probably prime
}

int main() {
    int num;
    int iterations = 5; // Number of iterations for the test

    srand(time(NULL));

    printf("Enter a number to check if it's prime: ");
    scanf("%d", &num);

    if (is_prime(num, iterations)) {
        printf("%d is a prime number.\n", num);
    } else {
        printf("%d is not a prime number.\n", num);
    }

    return 0;
}
